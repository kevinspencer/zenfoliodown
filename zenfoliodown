#!/usr/bin/env perl
# Copyright 2012 Kevin Spencer <kevin@kevinspencer.org>
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that
# copyright notice and this permission notice appear in supporting
# documentation. No representations are made about the suitability of this
# software for any purpose. It is provided "as is" without express or
# implied warranty.
#
################################################################################

use File::Basename;
use LWP::UserAgent;
use XML::Simple;
use strict;
use warnings;

our $VERSION = 0.3;

my $album = shift;
if (! $album) {
    print "USAGE: $0 <album>\n";
    exit();
}
mkdir($album) || die "Could not create $album - $!\n" if (! -d $album);

my $api_url    = 'http://www.zenfolio.com/api/1.6/zfapi.asmx';
my $api_method = 'LoadPhotoSetPhotos';
my $req_url    = $api_url . '/' . $api_method . '?photoSetId=' . $album . '&startingIndex=0&numberOfPhotos=1000';

my $bot = LWP::UserAgent->new();
$bot->agent("zenfoliodown/$VERSION");
my $response = $bot->get($req_url);
$bot->show_progress(1);
if ($response->is_success()) {
    if (! response_is_xml($response->content())) {
        die "Response from $req_url is not valid.\n";
    }
    my $xs = XML::Simple->new();
    my $data = $xs->XMLin($response->content());
    if (! $data->{Photo}) {
        die "Response from $req_url is not valid.\n";
    }
    for my $photo (@{$data->{Photo}}) {
        my $downloaded_file = $album . '/' . basename($photo->{OriginalUrl});
        if (-e $downloaded_file) {
            print "Already downloaded $photo->{OriginalUrl}, skipping.\n";
            next;
        }
        for my $attempt (1..3) {
            my $response = $bot->get($photo->{OriginalUrl}, ':content_file' => $downloaded_file);
            last if ($response->is_success() && -e $downloaded_file);
            if ($attempt == 3) {
                my $miss_log = $album . '/' . $album . '_miss.log';
                open(my $fh, '>>', $miss_log) || die "Could not append $miss_log - $!\n";
                print $fh $photo->{OriginalUrl}, "\n";
                close($fh);
            }
        }
    }
} else {
    print $response->status_line(), "\n";
}

sub response_is_xml {
    return 1 if ($_[0] =~ /^<\?xml version="1.0"/);
    return;
}
