#!/usr/bin/env perl
# Copyright 2012 Kevin Spencer <kevin@kevinspencer.org>
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that
# copyright notice and this permission notice appear in supporting
# documentation. No representations are made about the suitability of this
# software for any purpose. It is provided "as is" without express or
# implied warranty.
#
################################################################################

use File::Basename;
use Getopt::Long;
use LWP::UserAgent;
use XML::Simple;
use strict;
use warnings;

our $VERSION = 0.5;

my ($site, $album);
GetOptions("site=s" => \$site, "album=s" => \$album);

if ((! $album) || (! $site)) {
    print "USAGE: $0 --site=example.zenfolio.com --album=album\n";
    exit();
}

my $bot = LWP::UserAgent->new();
$bot->agent("zenfoliodown/$VERSION");
# minumum api version changed to 1.7
my $api_url = 'http://www.zenfolio.com/api/1.7/zfapi.asmx';

# remove leading p if album follows usual zenfolio convention of p123456789
$album =~ s/^p// if ($album =~ /\b^p\d+\b/);

# mkdir needs to be after leading "p" removal
mkdir($album) || die "Could not create $album - $!\n" if (! -d $album);

my $album_id = $album;
# if album_id still non numeric, call the ResolveReference API method to find integer album id
if ($album_id =~ /\D/) {
    $site =~ s/\.zenfolio\.com//;
    my $url = $api_url . '/' . 'ResolveReference' . "?loginName=$site" . "&reference=$album_id";
    my $response = $bot->get($url);
    if ($response->is_success()) {
        if (! response_is_xml($response->content())) {
            die "Response from $url is not valid.\n";
        }
        my $xs = XML::Simple->new();
        my $data = $xs->XMLin($response->content());
        $album_id = $data->{PhotoSet}{Id};
    }
}
my $url = $api_url . '/' . 'LoadPhotoSetPhotos' . '?photoSetId=' . $album_id . '&startingIndex=0&numberOfPhotos=1000';

my $response = $bot->get($url);
$bot->show_progress(1);
if ($response->is_success()) {
    if (! response_is_xml($response->content())) {
        die "Response from $url is not valid.\n";
    }
    my $xs = XML::Simple->new();
    my $data = $xs->XMLin($response->content());
    if (! $data->{Photo}) {
        die "Response from $url is not valid.\n";
    }
    for my $photo (@{$data->{Photo}}) {
        my $downloaded_file = $album . '/' . basename($photo->{OriginalUrl});
        if (-e $downloaded_file) {
            print "Already downloaded $photo->{OriginalUrl}, skipping.\n";
            next;
        }
        for my $attempt (1..3) {
            my $response = $bot->get($photo->{OriginalUrl}, ':content_file' => $downloaded_file);
            last if ($response->is_success() && -e $downloaded_file);
            if ($attempt == 3) {
                my $miss_log = $album . '/' . $album . '_miss.log';
                open(my $fh, '>>', $miss_log) || die "Could not append $miss_log - $!\n";
                print $fh $photo->{OriginalUrl}, "\n";
                close($fh);
            }
        }
    }
} else {
    print $response->status_line(), "\n";
}

sub response_is_xml {
    return 1 if ($_[0] =~ /^<\?xml version="1.0"/);
    return;
}
